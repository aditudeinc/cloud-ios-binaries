// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Tude
import DTBiOSSDK
import Foundation
import GoogleMobileAds
import PrebidMobile
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public typealias OnLoadListener = (Tude.AditudeWrapper) -> Swift.Void
@_hasMissingDesignatedInitializers @objc public class AditudeWrapper : ObjectiveC.NSObject {
  @objc public static func setShareGeoLocation(_ flag: Swift.Bool)
  @objc public static func setPubApiKey(_ inputPubApiKey: Swift.String)
  @objc public static func setAppId(_ inputAppId: Swift.String)
  @objc public static func setStoreURL(_ inputStoreURL: Swift.String)
  @objc public static func initialize(_ onInitialized: @escaping () -> Swift.Void)
  @objc public static func initializeWithoutCallback()
  @objc public static func cmd(command: @escaping (Tude.AditudeWrapper) -> Swift.Void)
  @objc public static func setGlobalTargeting(_ targeting: Swift.Dictionary<Swift.String, Swift.String>)
  @objc public func renderBannerAds(_ vc: UIKit.UIViewController)
  @objc public func createBannerAdView(_ vc: UIKit.UIViewController, _ adSlot: Swift.String) -> Tude.BannerAdView?
  @objc public func getRewardedVideoAd(_ slot: Swift.String) -> Tude.RewardedVideoAd?
  @objc public func getInterstitialAd(_ slot: Swift.String) -> Tude.InterstitialAd?
  @objc public func getGoogleNativeAd(_ slot: Swift.String) -> Tude.NativeAd?
  @objc public func getCustomFormatNativeAd(_ slot: Swift.String) -> Tude.NativeAd?
  @objc public func getMultiFormatAd(_ slot: Swift.String) -> Tude.NativeAd?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers final public class AdFailedToLoadError : ObjectiveC.NSObject, Foundation.CustomNSError {
  @objc final public let domain: Swift.String
  @objc final public let errorCode: Swift.Int
  @objc final public let failureReason: Swift.String
  @objc final public let errorUserInfo: [Swift.String : Any]
  @objc final public let localizedDescription: Swift.String
  @objc deinit
}
public typealias Listener = () -> Swift.Void
public typealias PreloadListener = (GoogleMobileAds.GAMRequest) -> Swift.Void
public typealias LoadErrorListener = (Tude.AdFailedToLoadError) -> Swift.Void
public typealias NativeAdLoadListener = (GoogleMobileAds.GADNativeAd) -> Swift.Void
public typealias CustomNativeAdLoadListener = (GoogleMobileAds.GADCustomNativeAd) -> Swift.Void
public typealias BannerAdLoadListener = (GoogleMobileAds.GADBannerView) -> Swift.Void
@objc @_hasMissingDesignatedInitializers final public class NativeAd : ObjectiveC.NSObject {
  @objc final public var isLoaded: Swift.Bool {
    get
  }
  @objc final public var onCustomNativeAdLoaded: Tude.CustomNativeAdLoadListener?
  @objc final public var onGoogleNativeAdLoaded: Tude.NativeAdLoadListener?
  @objc final public var onBannerAdLoaded: Tude.BannerAdLoadListener?
  @objc final public var onAdFailedToLoad: Tude.LoadErrorListener?
  @objc final public var onAdClicked: Tude.Listener?
  @objc final public var onAdClosed: Tude.Listener?
  @objc final public var onAdImpression: Tude.Listener?
  @objc final public var onAdOpened: Tude.Listener?
  @objc final public var onAdSwipeGestureClicked: Tude.Listener?
  @objc final public var slotName: Swift.String {
    @objc get
  }
  @objc deinit
}
extension Tude.NativeAd {
  @objc final public func preload(onPreload: (() -> Swift.Void)? = nil)
  @objc final public func setTargeting(_ targeting: Swift.Dictionary<Swift.String, Swift.String>)
  @objc final public func load(_ vc: UIKit.UIViewController)
}
extension Tude.NativeAd : GoogleMobileAds.GADNativeAdLoaderDelegate {
  @objc final public func adLoader(_ adLoader: GoogleMobileAds.GADAdLoader, didReceive nativeAd: GoogleMobileAds.GADNativeAd)
  @objc final public func adLoader(_ adLoader: GoogleMobileAds.GADAdLoader, didFailToReceiveAdWithError error: any Swift.Error)
}
extension Tude.NativeAd : GoogleMobileAds.GADCustomNativeAdLoaderDelegate {
  @objc final public func adLoader(_ adLoader: GoogleMobileAds.GADAdLoader, didReceive customNativeAd: GoogleMobileAds.GADCustomNativeAd)
  @objc final public func customNativeAdFormatIDs(for adLoader: GoogleMobileAds.GADAdLoader) -> [Swift.String]
}
extension Tude.NativeAd : GoogleMobileAds.GAMBannerAdLoaderDelegate {
  @objc final public func adLoader(_ adLoader: GoogleMobileAds.GADAdLoader, didReceive bannerView: GoogleMobileAds.GAMBannerView)
  @objc final public func validBannerSizes(for adLoader: GoogleMobileAds.GADAdLoader) -> [Foundation.NSValue]
}
extension Tude.NativeAd : GoogleMobileAds.GADNativeAdDelegate {
  @objc final public func nativeAdDidRecordClick(_ nativeAd: GoogleMobileAds.GADNativeAd)
  @objc final public func nativeAdDidRecordSwipeGestureClick(_ nativeAd: GoogleMobileAds.GADNativeAd)
  @objc final public func nativeAdDidRecordImpression(_ nativeAd: GoogleMobileAds.GADNativeAd)
  @objc final public func nativeAdWillPresentScreen(_ nativeAd: GoogleMobileAds.GADNativeAd)
  @objc final public func nativeAdDidDismissScreen(_ nativeAd: GoogleMobileAds.GADNativeAd)
}
extension Tude.NativeAd : GoogleMobileAds.GADCustomNativeAdDelegate {
  @objc final public func customNativeAdDidRecordClick(_ nativeAd: GoogleMobileAds.GADCustomNativeAd)
  @objc final public func customNativeAdDidRecordImpression(_ nativeAd: GoogleMobileAds.GADCustomNativeAd)
  @objc final public func customNativeAdWillPresentScreen(_ nativeAd: GoogleMobileAds.GADCustomNativeAd)
  @objc final public func customNativeAdDidDismissScreen(_ nativeAd: GoogleMobileAds.GADCustomNativeAd)
}
extension Tude.NativeAd : GoogleMobileAds.GADBannerViewDelegate {
  @objc final public func bannerViewDidRecordClick(_ bannerView: GoogleMobileAds.GADBannerView)
  @objc final public func bannerViewDidRecordImpression(_ bannerView: GoogleMobileAds.GADBannerView)
  @objc final public func bannerViewWillPresentScreen(_ bannerView: GoogleMobileAds.GADBannerView)
  @objc final public func bannerViewDidDismissScreen(_ bannerView: GoogleMobileAds.GADBannerView)
}
@objc @_hasMissingDesignatedInitializers final public class InterstitialAd : ObjectiveC.NSObject {
  @objc final public var isLoaded: Swift.Bool {
    get
  }
  @objc final public var onAdFailedToLoad: Tude.LoadErrorListener?
  @objc final public var onAdDidDismissFullScreenContent: (() -> Swift.Void)?
  @objc final public var onAdDidFailToPresentFullScreenWithError: ((any Swift.Error) -> Swift.Void)?
  @objc final public var onAdClicked: (() -> Swift.Void)?
  @objc final public var onAdDidRecordImpression: (() -> Swift.Void)?
  @objc final public var onAdWillPresentFullScreenContent: (() -> Swift.Void)?
  @objc final public var onAdWillDismissFullScreenContent: (() -> Swift.Void)?
  @objc final public var slotName: Swift.String {
    @objc get
  }
  @objc deinit
  @objc final public func preload()
  @objc final public func preload(onAdLoaded: @escaping (Tude.InterstitialAd) -> Swift.Void)
  @objc final public func render(_ vc: UIKit.UIViewController)
  @objc final public func setTargeting(_ targeting: Swift.Dictionary<Swift.String, Swift.String>)
}
extension Tude.InterstitialAd : GoogleMobileAds.GADFullScreenContentDelegate {
  @objc final public func ad(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd, didFailToPresentFullScreenContentWithError error: any Swift.Error)
  @objc final public func adDidRecordClick(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func adDidRecordImpression(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func adDidDismissFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func adWillDismissFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func adWillPresentFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
}
@_hasMissingDesignatedInitializers @objc final public class RewardItem : ObjectiveC.NSObject {
  @objc final public let type: Swift.String
  @objc final public let amount: Swift.Double
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) final public class BannerAdView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) final public var onAdLoaded: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) final public var onAdFailedToLoad: Tude.LoadErrorListener?
  @objc @_Concurrency.MainActor(unsafe) final public var onAdClicked: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) final public var onAdImpression: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) final public var onAdOpened: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) final public var onAdClosed: (() -> Swift.Void)?
  @objc @_Concurrency.MainActor(unsafe) final public var slotName: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) final public var adSlot: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public func load(_ vc: UIKit.UIViewController)
  @objc @_Concurrency.MainActor(unsafe) final public func setTargeting(_ targeting: Swift.Dictionary<Swift.String, Swift.String>)
  @objc deinit
}
extension Tude.BannerAdView : GoogleMobileAds.GADBannerViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func bannerViewDidReceiveAd(_ bannerView: GoogleMobileAds.GADBannerView)
  @_Concurrency.MainActor(unsafe) @objc final public func bannerView(_ bannerView: GoogleMobileAds.GADBannerView, didFailToReceiveAdWithError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc final public func bannerViewDidRecordClick(_ bannerView: GoogleMobileAds.GADBannerView)
  @_Concurrency.MainActor(unsafe) @objc final public func bannerViewDidRecordImpression(_ bannerView: GoogleMobileAds.GADBannerView)
  @_Concurrency.MainActor(unsafe) @objc final public func bannerViewWillPresentScreen(_ bannerView: GoogleMobileAds.GADBannerView)
  @_Concurrency.MainActor(unsafe) @objc final public func bannerViewDidDismissScreen(_ bannerView: GoogleMobileAds.GADBannerView)
}
@objc @_hasMissingDesignatedInitializers final public class RewardedVideoAd : ObjectiveC.NSObject {
  @objc final public var isLoaded: Swift.Bool {
    get
  }
  @objc final public var onAdFailedToLoad: Tude.LoadErrorListener?
  @objc final public var onAdDidDismissFullScreenContent: (() -> Swift.Void)?
  @objc final public var onAdDidFailToPresentFullScreenWithError: ((any Swift.Error) -> Swift.Void)?
  @objc final public var onAdClicked: (() -> Swift.Void)?
  @objc final public var onAdDidRecordImpression: (() -> Swift.Void)?
  @objc final public var onAdWillPresentFullScreenContent: (() -> Swift.Void)?
  @objc final public var onAdWillDismissFullScreenContent: (() -> Swift.Void)?
  @objc final public var onAdEarnedReward: ((Tude.RewardItem) -> Swift.Void)?
  @objc final public var slotName: Swift.String {
    @objc get
  }
  @objc deinit
  @objc final public func preload()
  @objc final public func preload(onAdLoaded: @escaping (Tude.RewardedVideoAd) -> Swift.Void)
  @objc final public func render(_ vc: UIKit.UIViewController)
  @objc final public func render(_ vc: UIKit.UIViewController, rewardHandler: @escaping (Tude.RewardItem) -> Swift.Void)
  @objc final public func setTargeting(_ targeting: Swift.Dictionary<Swift.String, Swift.String>)
}
extension Tude.RewardedVideoAd : GoogleMobileAds.GADFullScreenContentDelegate {
  @objc final public func ad(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd, didFailToPresentFullScreenContentWithError error: any Swift.Error)
  @objc final public func adDidRecordClick(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func adDidRecordImpression(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func adDidDismissFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func adWillDismissFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
  @objc final public func adWillPresentFullScreenContent(_ ad: any GoogleMobileAds.GADFullScreenPresentingAd)
}
